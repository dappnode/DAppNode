name: Artifacts
on:
  workflow_dispatch:
    inputs:
      core:
        description: "Version of the Core. Must be prefixed with v (e.g v0.2.47)"
        required: true
      dappmanager:
        description: "Version of the Dappmanager. Only numbers"
        required: true
      wifi:
        description: "Version of the WiFi Package. Only numbers"
        required: true
      bind:
        description: "Version of the Bind Package. Only numbers"
        required: true
      ipfs:
        description: "Version of the IPFS Package. Only numbers"
        required: true
      https:
        description: "Version of the HTTPS Package. Only numbers"
        required: true
      wireguard:
        description: "Version of the Wireguard Package. Only numbers"
        required: true
      vpn:
        description: "Version of the OpenVPN Package. Only numbers"
        required: true

env:
  BIND_VERSION: ${{ github.event.inputs.bind }}
  IPFS_VERSION: ${{ github.event.inputs.ipfs }}
  DAPPMANAGER_VERSION: ${{ github.event.inputs.dappmanager }}
  WIFI_VERSION: ${{ github.event.inputs.wifi }}
  WIREGUARD_VERSION: ${{ github.event.inputs.wireguard }}
  HTTPS_VERSION: ${{ github.event.inputs.https }}
  VPN_VERSION: ${{ github.event.inputs.vpn }}
  CORE_VERSION: ${{ github.event.inputs.core }}

jobs:
  pre-release:
    name: create artifacts
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    steps:
      # Regex for versions introduced
      - name: Check versions regex
        run: |
          [[ $BIND_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ $IPFS_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ $DAPPMANAGER_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && \
            [[ $WIFI_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ $WIREGUARD_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ $HTTPS_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && \
            [[ $VPN_VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]] && [[ $CORE_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]] || { echo "versions introduced in wrong format"; exit 1; }

      - name: Checkout
        uses: actions/checkout@v4

      # Edit the profile with the new versions introduced
      - name: Set new versions
        run: |
          sed -i -e "/BIND_VERSION/s/[0-9]*\.[0-9]*\.[0-9]*/"${BIND_VERSION}"/" .dappnode_profile
          sed -i -e "/IPFS_VERSION/s/[0-9]*\.[0-9]*\.[0-9]*/"${IPFS_VERSION}"/" .dappnode_profile
          sed -i -e "/VPN_VERSION/s/[0-9]*\.[0-9]*\.[0-9]*/"${VPN_VERSION}"/" .dappnode_profile
          sed -i -e "/DAPPMANAGER_VERSION/s/[0-9]*\.[0-9]*\.[0-9]*/"${DAPPMANAGER_VERSION}"/" .dappnode_profile
          sed -i -e "/WIFI_VERSION/s/[0-9]*\.[0-9]*\.[0-9]*/"${WIFI_VERSION}"/" .dappnode_profile
          sed -i -e "/WIREGUARD_VERSION/s/[0-9]*\.[0-9]*\.[0-9]*/"${WIREGUARD_VERSION}"/" .dappnode_profile
          sed -i -e "/HTTPS_VERSION/s/[0-9]*\.[0-9]*\.[0-9]*/"${HTTPS_VERSION}"/" .dappnode_profile
          cat .dappnode_profile

      # ISO ATTENDED
      - name: Build attended
        run: |
          sed -i -e "/UNATTENDED/s/true/false/" docker-compose.yml 
          docker compose build
          docker compose up

      # Verify ISO attended created
      - name: Check iso attended
        run: |
          ls -lrt images/DAppNode-debian-bookworm-amd64.iso

      # Set new name for the release asset
      - name: Set DAppNode attended ISO name
        run: |
          cp ./images/DAppNode-debian-bookworm-amd64.iso DAppNode-${CORE_VERSION}-debian-bookworm-amd64.iso

      # ISO UNATTENDED
      - name: Build unattended
        run: |
          sed -i -e "/UNATTENDED/s/false/true/" docker-compose.yml
          docker compose build
          docker compose up

      # Verify ISO unattended was created
      - name: Check iso unattended
        run: |
          ls -lrt images/DAppNode-debian-bookworm-amd64.iso

      # Set new name for the release asset
      - name: Set DAppNode unttended ISO name
        run: |
          cp ./images/DAppNode-debian-bookworm-amd64.iso DAppNode-${CORE_VERSION}-debian-bookworm-amd64-unattended.iso

      - name: Create dappnode_profile.sh
        run: |
          cp .dappnode_profile dappnode_profile.sh

      # ARTIFACTS ASSETS
      - name: Artifact
        uses: actions/upload-artifact@v3
        with:
          name: test-artifact
          path: |
            ./DAppNode-*-amd64.iso
            ./DAppNode-*-amd64-unattended.iso
            ./scripts/dappnode_install.sh
            ./scripts/dappnode_install_pre.sh
            ./scripts/dappnode_uninstall.sh
            ./scripts/dappnode_access_credentials.sh
            dappnode_profile.sh

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
